//Matrix multiplication                                                                                                                                                                                                           #include <stdio.h>
#include <stdlib.h>
#include <time.h>

void multiplyMatrices(int** matrix1, int** matrix2, int** result, int rows1, int cols1, int cols2) {
    int i, j, k;

    for (i = 0; i < rows1; i++) {
        for (j = 0; j < cols2; j++) {
            result[i][j] = 0;
            for (k = 0; k < cols1; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }
}

void printMatrix(int** matrix, int rows, int cols) {
    int i, j;

    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

void writeMatrixToFile(int** matrix, int rows, int cols, const char* filename) {
    FILE* file = fopen(filename, "w");
    if (file == NULL) {
        printf("Unable to open the file.\n");
        return;
    }

    int i, j;

    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            fprintf(file, "%d ", matrix[i][j]);
        }
        fprintf(file, "\n");
    }

    fclose(file);
}

int** readMatrixFromFile(int rows, int cols, const char* filename) {
    FILE* file = fopen(filename, "r");
    if (file == NULL) {
        printf("Unable to open the file.\n");
        return NULL;
    }

    int** matrix = (int*)malloc(rows * sizeof(int));
    int i, j;

    for (i = 0; i < rows; i++) {
        matrix[i] = (int*)malloc(cols * sizeof(int));
        for (j = 0; j < cols; j++) {
            if (fscanf(file, "%d", &matrix[i][j]) != 1) {
                printf("Invalid data in the file.\n");
                fclose(file);
                return NULL;
            }
        }
    }

    fclose(file);
    return matrix;
}

int main() {
    const char* inputFile1 = "matrix1.txt";
    const char* inputFile2 = "matrix2.txt";
    const char* outputFile = "result.txt";

    int rows1, cols1, rows2, cols2;
    int** matrix1;
    int** matrix2;
    int** result;

    // Read the dimensions of the first matrix from file
    FILE* file1 = fopen(inputFile1, "r");
    if (file1 == NULL) {
        printf("Unable to open the first input file.\n");
        return 0;
    }
    fscanf(file1, "%d %d", &rows1, &cols1);
    fclose(file1);

    // Read the dimensions of the second matrix from file
    FILE* file2 = fopen(inputFile2, "r");
    if (file2 == NULL) {
        printf("Unable to open the second input file.\n");
        return 0;
    }
    fscanf(file2, "%d %d", &rows2, &cols2);
    fclose(file2);

    // Check if matrix dimensions are valid for multiplication
    if (cols1 != rows2) {
        printf("Invalid matrix dimensions for multiplication.\n");
        return 0;
    }

    // Read the matrices from the input files
    matrix1 = readMatrixFromFile(rows1, cols1, inputFile1);
    matrix2 = readMatrixFromFile(rows2, cols2, inputFile2);

    if (matrix1 == NULL || matrix2 == NULL) {
        printf("Error reading matrices from files.\n");
        return 0;
    }

    // Allocate memory for the result matrix
    result = (int*)malloc(rows1 * sizeof(int));
    int i;
    for (i = 0; i < rows1; i++) {
        result[i] = (int*)malloc(cols2 * sizeof(int));
    }

    // Perform matrix multiplication
    clock_t start = clock();
    multiplyMatrices(matrix1, matrix2, result, rows1, cols1, cols2);
    clock_t end = clock();
    double cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("Matrix multiplication completed in %.4f seconds.\n", cpu_time_used);

    // Print the result matrix
    printf("Result:\n");
    printMatrix(result, rows1, cols2);

    // Write the result matrix to the output file
    writeMatrixToFile(result, rows1, cols2, outputFile);

    // Deallocate memory
    for (i = 0; i < rows1; i++) {
        free(matrix1[i]);
    }
    free(matrix1);

    for (i = 0; i < rows2; i++) {
        free(matrix2[i]);
    }
    free(matrix2);

    for (i = 0; i < rows1; i++) {
        free(result[i]);
    }
    free(result);

    return 0;
}
