//Transpose of a matrix                                                                                                                                                                                  #include <stdio.h>
#include <stdlib.h>
#include <time.h>

void transposeMatrix(int** matrix, int** result, int rows, int cols) {
    int i, j;

    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            result[j][i] = matrix[i][j];
        }
    }
}

void printMatrix(int** matrix, int rows, int cols) {
    int i, j;

    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

void writeMatrixToFile(int** matrix, int rows, int cols, const char* filename) {
    FILE* file = fopen(filename, "w");
    if (file == NULL) {
        printf("Unable to open the file.\n");
        return;
    }

    int i, j;

    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            fprintf(file, "%d ", matrix[i][j]);
        }
        fprintf(file, "\n");
    }

    fclose(file);
}

int** readMatrixFromFile(int rows, int cols, const char* filename) {
    FILE* file = fopen(filename, "r");
    if (file == NULL) {
        printf("Unable to open the file.\n");
        return NULL;
    }

    int** matrix = (int*)malloc(rows * sizeof(int));
    int i, j;

    for (i = 0; i < rows; i++) {
        matrix[i] = (int*)malloc(cols * sizeof(int));
        for (j = 0; j < cols; j++) {
            if (fscanf(file, "%d", &matrix[i][j]) != 1) {
                printf("Invalid data in the file.\n");
                fclose(file);
                return NULL;
            }
        }
    }

    fclose(file);
    return matrix;
}

int main() {
    const char* inputFile = "matrix.txt";
    const char* outputFile = "transpose.txt";

    int rows, cols;
    int** matrix;
    int** transpose;

    // Read the dimensions of the matrix from file
    FILE* file = fopen(inputFile, "r");
    if (file == NULL) {
        printf("Unable to open the input file.\n");
        return 0;
    }
    fscanf(file, "%d %d", &rows, &cols);
    fclose(file);

    // Read the matrix from the input file
    matrix = readMatrixFromFile(rows, cols, inputFile);
    if (matrix == NULL) {
        printf("Error reading the matrix from the file.\n");
        return 0;
    }

    // Allocate memory for the transpose matrix
    transpose = (int*)malloc(cols * sizeof(int));
    int i;
    for (i = 0; i < cols; i++) {
        transpose[i] = (int*)malloc(rows * sizeof(int));
    }

    // Perform matrix transpose
    clock_t start = clock();
    transposeMatrix(matrix, transpose, rows, cols);
    clock_t end = clock();
    double cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("Matrix transpose completed in %.4f seconds.\n", cpu_time_used);

    // Print the transpose matrix
    printf("Transpose:\n");
    printMatrix(transpose, cols, rows);

    // Write the transpose matrix to the output file
    writeMatrixToFile(transpose, cols, rows, outputFile);

    // Deallocate memory
    for (i = 0; i < rows; i++) {
        free(matrix[i]);
    }
    free(matrix);

    for (i = 0; i < cols; i++) {
        free(transpose[i]);
    }
    free(transpose);

    return 0;
}
